function Mult(x: Int, y: Int): Int 
  decreases y
  requires 0 <= x && 0 <= y
  ensures  0 <= result
{
  y == 0 ? 0 : x + Mult(x, y-1)
}


/* lemma */
method MultCommutative(x: Int, y: Int)
  decreases x + y
  requires 0 <= x && 0 <= y
  ensures Mult(x, y) == Mult(y, x)
{
    if(x == y) {
        // trivial
    } else {
        if(x == 0) {
            MultCommutative(0, y-1)
        } else {
            if(y == 0) {
                MultCommutative(0, x-1) 
            } else {
                MultCommutative(y, x-1) 
                MultCommutative(y-1, x-1) 
                MultCommutative(y-1, x) 
            }
        }
    }
}
  