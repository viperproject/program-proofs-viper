import "examples-5.8.vpr"

method EvalEnv(e: Expr, n: Seq[Int], env: Map[Seq[Int], Int])
requires n in env
requires forall i: Int :: i in range(env) ==> 0 <= i // This ensures the vars in env are non-negative
ensures Eval(e, env) == Eval(Substitute(e, n, env[n]), env)
{
    if(e.isNode) {
        EvalEnvList(e.args, e.op, n, env)
    }
}

method EvalEnvList(args: List[Expr], op: Op, n: Seq[Int], env: Map[Seq[Int], Int])
requires n in env
requires forall i: Int :: i in range(env) ==> 0 <= i 
ensures EvalList(args, op, env) == EvalList(SubstituteList(args, n, env[n]), op, env)
{
    if(args.isCons) {
        EvalEnv(args.head, n, env);
        EvalEnvList(args.tail, op, n, env);
    }
}

method EvalEnvDefault(e: Expr, n: Seq[Int], env: Map[Seq[Int], Int])
requires !(n in env)
ensures Eval(e, env) == Eval(Substitute(e, n, 0), env)
{
    if(e.isNode) {
        EvalEnvListDefault(e.args, e.op, n, env)
    }
}

method EvalEnvListDefault(args: List[Expr], op: Op, n: Seq[Int], env: Map[Seq[Int], Int])
requires !(n in env)
ensures EvalList(args, op, env) == EvalList(SubstituteList(args, n, 0), op, env)
{
    if(args.isCons) {
        EvalEnvDefault(args.head, n, env);
        EvalEnvListDefault(args.tail, op, n, env);
    }
}

method SubstituteIdempotent(e: Expr, n: Seq[Int], c: Int)
requires 0 <= c
ensures Substitute(Substitute(e, n, c), n, c) == Substitute(e, n, c)
{
    if(e.isNode) {
        SubstituteListIdempotent(e.args, n, c)
    }
}

method SubstituteListIdempotent(es: List[Expr], n: Seq[Int], c: Int)
requires 0 <= c
ensures SubstituteList(SubstituteList(es, n, c), n, c) == SubstituteList(es, n, c)
{
    if(es.isCons) {
        SubstituteIdempotent(es.head, n, c);
        SubstituteListIdempotent(es.tail, n, c);
    }
}