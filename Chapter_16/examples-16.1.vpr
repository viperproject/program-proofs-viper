/**
 * This ADT denotes the syntactic categories for ASCII characters. Because
 * the ASCII character set is comprised of 128 characters, we differentiate
 * between the categories of identifiers, numbers, operators, and whitespace.
 * Any character that does not belong to one of these categories is considered
 * an error. The category end denotes end-of-input.
 */
adt Category {
    Identifier()
    Number()
    Operator()
    Whitespace()
    Error()
    End()
}

/**
 * This function checks whether a given ASCII character belongs to a given
 * syntactic category. We once again define the character representation
 * as an integer in the range of 0 to 127. Because we don't intend to have
 * characters belonging to multiple categories, we exclude the end category
 * from the possible inputs. 
 */
function Is(ch: Int, cat: Category): Bool
    requires !cat.isEnd
    requires 0 <= ch <= 127
{
    (cat.isWhitespace) ? ch == 32 || ch == 9 || ch == 13 || ch == 10 : // " \t\r\n"
    (cat.isIdentifier) ? 65 <= ch <= 90 || 97 <= ch <= 122           : // 'A' <= ch <= 'Z' || 'a' <= ch <= 'z'
    (cat.isNumber)     ? 48 <= ch <= 57                              : // '0' <= ch <= '9'
    (cat.isOperator)   ? ch == 43 || ch == 45 || ch == 42 || ch == 47 || ch == 37 || ch == 33 || 
                         ch == 61 || ch == 62 || ch == 60 || ch == 126 || ch == 94 || ch == 38 || 
                         ch == 124                                   : // "+-*/%!=><=~^&|"
                         !Is(ch, Identifier()) && !Is(ch, Number()) && !Is(ch, Operator()) && 
                         !Is(ch, Whitespace()) // error case
}

/**
 * Because we define characters as integers, we define strings as sequences of
 * integers.
 */
field source: Seq[Int]
field n: Int

/**
 * This predicate defines the constraints for the Tokenizer Dafny class. It
 * consists of a source string, which is a sequence of integers in our case,
 * and a number n that keeps track of how many characters have already been
 * processed. The source string in Dafny is considered to be immutable through
 * the const keyword. This cannot be directly reflected by the Viper 
 * implementation. While sequences are immutable, they can be replaced by new
 * sequences. Any method that uses the Tokenizer predicate with write access,
 * must include a postcondition that ensures that the source string remains
 * unchanged to achieve the same effect. We also have to make sure that only
 * ASCII characters are used in the source string, meaning that integers in the
 * sequence have to be between 0 and 127. The value of n must be between 0 and
 * the length of the source string.
 */
predicate Tokenizer(this: Ref)
{
    acc(this.source) && 
    acc(this.n) && 0 <= this.n <= |this.source| &&
    forall i: Int :: 0 <= i < |this.source| ==> 0 <= this.source[i] <= 127
}

/**
 * This function returns the source string of the Tokenizer predicate. It also
 * ensures that the source string only contains ASCII characters, to bring this
 * information out of the predicate.
 */
function getSource(this: Ref): Seq[Int]
    requires Tokenizer(this)
    ensures forall i: Int :: 0 <= i < |result| ==> 0 <= result[i] <= 127
{
    unfolding Tokenizer(this) in
    this.source
}

/**
 * This function returns the number of characters that have already been
 * processed by the Tokenizer. It ensures that the value of n is between 0 and
 * the length of the source string, to bring this information out of the
 * predicate.
 */
function getN(this: Ref): Int
    requires Tokenizer(this)
    ensures 0 <= result <= |getSource(this)|
{
    unfolding Tokenizer(this) in
    this.n
}

/**
 * This method takes a string, which is a sequence of Integers between 0 and 
 * 127 here, and initializes a Tokenizer predicate with it.
 */
method TokenizerConstructor(s: Seq[Int]) returns (this: Ref)
    requires forall i: Int :: 0 <= i < |s| ==> 0 <= s[i] <= 127
    ensures Tokenizer(this)
    ensures getSource(this) == s && getN(this) == 0
{
    this := new(source, n)
    this.source := s
    this.n := 0
    fold Tokenizer(this)
}

/**
 * This method reads the next token from the source string. It skips any
 * whitespace characters, determines the syntactic category of the next token 
 * and if it is not an error or the end of the input, reads the token. The
 * token is a continuous section of the source string that belongs to the same
 * syntactic category after any whitespace after the n at the start of the 
 * function. 
 */
method Read(this: Ref) returns (cat: Category, p: Int, token: Seq[Int]) 
    requires Tokenizer(this)
    ensures 0 <= p
    ensures Tokenizer(this)
    ensures getSource(this) == old(getSource(this))
    ensures !cat.isWhitespace
    ensures old(getN(this)) <= p <= getN(this) <= |getSource(this)|
    ensures cat.isEnd <==> p == |getSource(this)|
    ensures cat.isEnd || cat.isError <==> p == getN(this)
    ensures forall i: Int :: old(getN(this)) <= i < p ==> 
        Is(getSource(this)[i], Whitespace())
    ensures forall i: Int :: p <= i < getN(this) ==> Is(getSource(this)[i], cat)
    ensures p < getN(this) ==> getN(this) == |getSource(this)| || !Is(getSource(this)[getN(this)], cat)
    ensures !cat.isError ==> token == getSource(this)[p..getN(this)]
{
    // skip whitespace
    while (getN(this) != |getSource(this)| && Is(getSource(this)[getN(this)], Whitespace()))
        invariant Tokenizer(this)
        invariant getSource(this) == old(getSource(this))
        invariant old(getN(this)) <= getN(this) <= |getSource(this)|
        invariant forall i: Int :: old(getN(this)) <= i < getN(this) ==> Is(getSource(this)[i], Whitespace())
    {
        unfold Tokenizer(this)
        this.n := this.n + 1
        fold Tokenizer(this)
    }
    p := getN(this)
    // determine syntactic category
    var return: Bool := false
    if (getN(this) == |getSource(this)|)
    {
        cat := End()
        token := Seq()
        return := true
    }
    elseif (Is(getSource(this)[getN(this)], Identifier()))
    {
        cat := Identifier()
    }
    elseif (Is(getSource(this)[getN(this)], Number()))
    {
        cat := Number()
    }
    elseif (Is(getSource(this)[getN(this)], Operator()))
    {
        cat := Operator()
    }
    else
    {
        cat := Error()
        token := Seq()
        return := true
    }
    // read token
    if (!return)
    {
        var start: Int := getN(this)
        unfold Tokenizer(this)
        this.n := this.n + 1
        fold Tokenizer(this)
        while (getN(this) != |getSource(this)| && Is(getSource(this)[getN(this)], cat))
            invariant Tokenizer(this)
            invariant getSource(this) == old(getSource(this))
            invariant p <= getN(this) <= |getSource(this)|
            invariant forall i: Int :: p <= i < getN(this) ==> Is(getSource(this)[i], cat)
        {
            unfold Tokenizer(this)
            this.n := this.n + 1
            fold Tokenizer(this)
        }
        token := getSource(this)[start..getN(this)]
    }    
}
        



    